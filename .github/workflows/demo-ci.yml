name: Build & Deploy WebGL

# триггер — только при пуше в ветку build
on:
  push:
    branches: [ "build" ]

# минимальные права, нужные для deploy-pages
permissions:
  contents: read
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      site_path: ${{ steps.set_site_path.outputs.site }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show "CI started!" (лог)
        run: echo "CI started!"

      # --- (по желанию) кеш Library для ускорения сборок ---
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: ${{ runner.os }}-unity-library-${{ hashFiles('**/ProjectVersion.txt') }}
          restore-keys: |
            ${{ runner.os }}-unity-library-

      # --- Активируйте Unity (вариант: game-ci activation / manual ULF) ---
      # Этот шаг нужен только если вы собираетесь реально запускать Editor.
      # Инструкции по подготовке секретов и созданию .ulf см. в документации GameCI (ниже).
      - name: Activate Unity (GameCI)
        if: ${{ secrets.UNITY_LICENSE != '' }}
        uses: game-ci/unity-activate@v2
        with:
          # пример: передадим содержимое .ulf в секрет UNITY_LICENSE
          license: ${{ secrets.UNITY_LICENSE }}

      # --- Собираем WebGL: используем game-ci unity-builder ---
      - name: Build WebGL with game-ci
        id: unity_build
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: WebGL
          unityVersion: auto        # возьмёт из ProjectSettings/ProjectVersion.txt
          buildsPath: build         # по умолчанию создаст build/<platform>/<name>
          buildName: WebGLBuild

      # После сборки ожидаем, что результат будет в ./build/WebGLBuild
      - name: Verify built files
        run: |
          echo "Содержимое ./build:"
          ls -la build || true
          echo "Содержимое ./build/WebGLBuild:"
          ls -la build/WebGLBuild || true

      # --- Подготовка и загрузка артефакта для Pages ---
      - name: Upload pages artifact (package for GitHub Pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/WebGLBuild    # <-- путь к директории с index.html (generated by Unity)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
